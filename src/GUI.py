import tkinter as tk
from tkinter import ttk, filedialog
import sounddevice as sd
import numpy as np
import threading
import os
from scipy.io.wavfile import write as write_wav
import datetime
import queue

samplerate = 16000
channels = 1
blocksize = 1024
SECONDS = 1
samples_per_chunk = samplerate * SECONDS

class AudioApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

        self.save_directory = os.getcwd()

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        top_frame = ttk.Frame(root)
        top_frame.pack(fill=tk.X, padx=10, pady=5)

        self.dir_label = ttk.Label(top_frame, text="üìÅ –ü–∞–ø–∫–∞: " + self.save_directory, anchor="e")
        self.dir_label.pack(side=tk.RIGHT)

        self.dir_button = ttk.Button(top_frame, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", command=self.choose_directory)
        self.dir_button.pack(side=tk.RIGHT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
        self.record_button = ttk.Button(root, text="–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", command=self.toggle_recording)
        self.record_button.pack(pady=10)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
        self.recording_indicator = ttk.Label(root, text="", foreground="red", font=("Arial", 10, "bold"))
        self.recording_indicator.pack()

        # –ü–æ–¥–ø–∏—Å—å
        self.transcription_label = ttk.Label(root, text="–ó–¥–µ—Å—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", foreground="gray", font=("Arial", 10, "italic"))
        self.transcription_label.pack(pady=10)

        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
        self.audio_queue = queue.Queue()
        self.audio_buffer = []

        # –§–ª–∞–≥ –∑–∞–ø–∏—Å–∏
        self.running = False
        self.latest_data = np.zeros(blocksize)
        self.recorded_data = []

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
        threading.Thread(target=self.process_audio_from_queue, daemon=True).start()

    def choose_directory(self):
        folder = filedialog.askdirectory()
        if folder:
            self.save_directory = folder
            self.dir_label.config(text="üìÅ –ü–∞–ø–∫–∞: " + self.save_directory)

    def audio_callback(self, indata, frames, time, status):
        if status:
            print(status)

        self.latest_data = indata[:, 0]  # –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.audio_buffer.append(indata.copy())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –ª–∏ 1 —Å–µ–∫—É–Ω–¥–∞
        total_samples = sum(chunk.shape[0] for chunk in self.audio_buffer)
        if total_samples >= samples_per_chunk:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –∫–ª–∞–¥—ë–º –≤ –æ—á–µ—Ä–µ–¥—å
            chunk = np.concatenate(self.audio_buffer, axis=0)[:samples_per_chunk]
            self.audio_queue.put(chunk)
            # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
            remaining = np.concatenate(self.audio_buffer, axis=0)[samples_per_chunk:]
            self.audio_buffer = [remaining] if len(remaining) > 0 else []

    def toggle_recording(self):
        if not self.running:
            self.start_recording()
        else:
            self.stop_recording()

    def start_recording(self):
        self.running = True
        self.recorded_data = []
        self.record_button.config(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        self.recording_indicator.config(text="‚óè –ò–¥—ë—Ç –∑–∞–ø–∏—Å—å...")

        def _thread():
            with sd.InputStream(callback=self.audio_callback,
                                channels=channels,
                                samplerate=samplerate,
                                blocksize=blocksize):
                while self.running:
                    sd.sleep(100)

        threading.Thread(target=_thread, daemon=True).start()

    def stop_recording(self):
        self.running = False
        self.record_button.config(text="–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
        self.recording_indicator.config(text="")
        self.save_recording()

    def save_recording(self):
        if self.recorded_data:
            audio = np.concatenate(self.recorded_data, axis=0)
            filename = datetime.datetime.now().strftime("recording_%Y%m%d_%H%M%S.wav")
            path = os.path.join(self.save_directory, filename)
            audio_int16 = np.int16(audio * 32767)
            write_wav(path, samplerate, audio_int16)
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {path}")
            self.dir_label.config(text=f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(path)}")

    def process_audio_from_queue(self):
        while True:
            audio_chunk = self.audio_queue.get()
            print(f"[–û–±—Ä–∞–±–æ—Ç–∫–∞] –ü–æ–ª—É—á–µ–Ω–æ {len(audio_chunk)} –æ—Ç—Å—á—ë—Ç–æ–≤.")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.transcription_label.config(text="–ó–¥–µ—Å—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")

root = tk.Tk()
app = AudioApp(root)
root.mainloop()
